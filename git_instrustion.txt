____________________________________________________________________________________________
_0_НАСТРОЙКА КОНФИГУРАЦИИ___________________________________________________________________
____________________________________________________________________________________________
git --version = получить текущую версию
git config --global user.name "Victor Shulpov" = установить глобальное имя того (автор коммитов)
git config --global user.email "vshulpov@list.ru" = установить глобальный рабочий эмаил (не очень важен)
git config user.name "Victor Shulpov" = установить локалное имя того (автор коммитов)
git config user.email "vshulpov@list.ru" = установить локальное рабочий эмаил (не очень важен)
git config --global --list = посмотреть весь список (всю настроенную конфигурацию)
cd C:\git_test\ = перейти в директорию, которую будем делать репозиторием
mkdir folder1 = создание папки в текущей директории

git init = инициализация текущей папки (инициализация репозитория)
ls -a = возвращает список файлов в текущей папке (без скрытых просто ls)
git config --global --unset user.name "name" = удалить значение имени user.name
____________________________________________________________________________________________
_1_ПЕРВЫЙ КОММИТ____________________________________________________________________________
____________________________________________________________________________________________
nano "filename.txt" = создание файла с кучей функций
git add "filename.txt" = unstaged станет staged, файл будет проиндексирован, при коммите будет учтён
git add . = добавляет все файлы в staged
git commit -m "commit text" = сделать коммит staged файлов
____________________________________________________________________________________________
_2_ПРОВЕРКА_СОСТОЯНИЯ_______________________________________________________________________
____________________________________________________________________________________________
git status = текущение положение (название ветки), статус, можно ли коммитить, если нет, то
выведет, что коммитить нечего, в другом случае скажет staged или unstaged, т.е. подскажет, 
что нужно проиндексировать, или разрешит сделать коммит
unstaged - будут показаны красным цветом, staged - зелёным

git restore --staged <file>..." = приводит файл из состояния staged в unstaged
____________________________________________________________________________________________
_3_ИСТОРИЯ_КОММИТОВ_________________________________________________________________________
____________________________________________________________________________________________
git log = возвращает историю коммитов с хэшем, автором и датой
git log --pretty=oneline --all = тоже самое, но красиво в одну линию
git log --pretty=oneline --max-count=3 = тоже самое, но выводит 3 последних коммита
git log --author= "Shulpov Victor" = история по автору
git log --pretty=format:"%h - по своему формату
____________________________________________________________________________________________
_4_ИНДЕКСАЦИЯ_ФАЙЛОВ_(ПОДРОБНЕЕ)____________________________________________________________
____________________________________________________________________________________________
git add "filename.txt" = unstaged станет staged, файл будет проиндексирован, при коммите будет учтён
git add "filename.txt", "filename2.html" = можно перечислять
git add . = добавляет все файлы  ИЗ ТЕКУЩЕЙ ДИРЕКТОРИИ в staged
git add * = добавляет все файлы  ИЗ ТЕКУЩЕГО РЕПОЗИТОРИЯ в staged

____________________________________________________________________________________________
_5_GIT_CHECKOUT_ВОЗВРАЩЕНИЕ_К_ОПРЕДЕЛЕННОМУ КОММИТУ_________________________________________
____________________________________________________________________________________________
делаем git log -> получаем hashes (хэши), "идентификторы" наших коммитов
git checkout 55a249b1a7c4c69b44bb50b5d77c081dc5948239 = переходим к старой версии файлов 
(можно проверить с помощью git status)
____________________________________________________________________________________________
_6_ОТМЕНА_ИНДЕКСИРОВАННЫХ ФАЙЛОВ____________________________________________________________
____________________________________________________________________________________________
git reset HEAD text.txt = отменяет индексирование файла, делает его unstaged
после этого можно сделать git checkout text.txt = файл вернется в состояние последнего коммита
git reset master = отменит индексирование файлов всей ветки
____________________________________________________________________________________________
_7_ВОЗВРАЩЕНИЕ К ПРОШЛОМУ КОММИТУ (ОТКАТ)___________________________________________________
____________________________________________________________________________________________
git revert HEAD = откат последнего коммита
можно вернуться к другому коммиту, написав вместо HEAD хэш коммита, к которому возвращаемся
____________________________________________________________________________________________
_8_ПРОСТОЙ_КОНФЛИКТ_________________________________________________________________________
____________________________________________________________________________________________
git revert --abort = при возникновении конфликта при реверте отменит реверт и соотвественно конфликт
или решаем конфликт и пишем
git revert --continue
____________________________________________________________________________________________
_9_ВЕТКИ_И_ИХ_ПРИМЕНЕНИЕ____________________________________________________________________
____________________________________________________________________________________________
git branch = покажет ветки в локальном репозитории
git checkout -b NewBranchName = создает новую ветку и сразу переходит в нееg
git checkout branchName = переход на нужную ветку
____________________________________________________________________________________________
_10_СЛИЯНИЕ_ВЕТОК_______________________________________________________________________________________
____________________________________________________________________________________________